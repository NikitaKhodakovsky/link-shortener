/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type RegisterError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 409
			payload: {
				/**
				 * @example 409
				 */
				statusCode: number
				/**
				 * @example User with such username already exists
				 */
				message: string
				/**
				 * @example Conflict
				 */
				error?: string
			}
	  }
>

export type RegisterVariables = {
	body: Schemas.RegisterDTO
}

export const register = (variables: RegisterVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.User, RegisterError, Schemas.RegisterDTO, {}, {}, {}>({
		url: '/auth/register',
		method: 'post',
		...variables,
		signal
	})

export type LoginError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Invalid password
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
	| {
			status: 404
			payload: {
				/**
				 * @example 404
				 */
				statusCode: number
				/**
				 * @example User not found
				 */
				message: string
				/**
				 * @example Not Found
				 */
				error?: string
			}
	  }
>

export type LoginVariables = {
	body: Schemas.LoginDTO
}

export const login = (variables: LoginVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.User, LoginError, Schemas.LoginDTO, {}, {}, {}>({
		url: '/auth/login',
		method: 'post',
		...variables,
		signal
	})

export type LogoutError = Fetcher.ErrorWrapper<undefined>

export const logout = (signal?: AbortSignal) =>
	apiFetch<boolean, LogoutError, undefined, {}, {}, {}>({ url: '/auth/logout', method: 'delete', signal })

export type ProfileError = Fetcher.ErrorWrapper<{
	status: 401
	payload: {
		/**
		 * @example 401
		 */
		statusCode: number
		/**
		 * @example Unauthorized
		 */
		message: string
		/**
		 * @example Unauthorized
		 */
		error?: string
	}
}>

export const profile = (signal?: AbortSignal) =>
	apiFetch<Schemas.User, ProfileError, undefined, {}, {}, {}>({ url: '/auth/profile', method: 'get', signal })

export type DeleteAccountError = Fetcher.ErrorWrapper<{
	status: 401
	payload: {
		/**
		 * @example 401
		 */
		statusCode: number
		/**
		 * @example Unauthorized
		 */
		message: string
		/**
		 * @example Unauthorized
		 */
		error?: string
	}
}>

export const deleteAccount = (signal?: AbortSignal) =>
	apiFetch<boolean, DeleteAccountError, undefined, {}, {}, {}>({ url: '/auth/profile', method: 'delete', signal })

export type CheckUsernamePathParams = {
	username: string
}

export type CheckUsernameError = Fetcher.ErrorWrapper<undefined>

export type CheckUsernameVariables = {
	pathParams: CheckUsernamePathParams
}

export const checkUsername = (variables: CheckUsernameVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.UsernameCheckDTO, CheckUsernameError, undefined, {}, {}, CheckUsernamePathParams>({
		url: '/auth/username/{username}',
		method: 'get',
		...variables,
		signal
	})

export type CreateLinkError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Unauthorized
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
	| {
			status: 409
			payload: {
				/**
				 * @example 409
				 */
				statusCode: number
				/**
				 * @example Backhalf is not unique
				 */
				message: string
				/**
				 * @example Conflict
				 */
				error?: string
			}
	  }
>

export type CreateLinkVariables = {
	body: Schemas.CreateLinkDTO
}

export const createLink = (variables: CreateLinkVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.Link, CreateLinkError, Schemas.CreateLinkDTO, {}, {}, {}>({
		url: '/links',
		method: 'post',
		...variables,
		signal
	})

export type FindAllLinksQueryParams = {
	/**
	 * @default 1
	 */
	page?: number
	/**
	 * @default 20
	 */
	perPage?: number
}

export type FindAllLinksError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Unauthorized
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
>

export type FindAllLinksResponse = {
	items: Schemas.Link[]
	meta: {
		itemCount: number
		totalItems: number
		itemsPerPage: number
		totalPages: number
		currentPage: number
	}
	links?: {
		first: string
		previous: string
		next: string
		last: string
	}
}

export type FindAllLinksVariables = {
	queryParams?: FindAllLinksQueryParams
}

export const findAllLinks = (variables: FindAllLinksVariables, signal?: AbortSignal) =>
	apiFetch<FindAllLinksResponse, FindAllLinksError, undefined, {}, FindAllLinksQueryParams, {}>({
		url: '/links',
		method: 'get',
		...variables,
		signal
	})

export type UpdateLinkPathParams = {
	linkId: number
}

export type UpdateLinkError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Unauthorized
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
	| {
			status: 404
			payload: {
				/**
				 * @example 404
				 */
				statusCode: number
				/**
				 * @example Link not found
				 */
				message: string
				/**
				 * @example Not Found
				 */
				error?: string
			}
	  }
>

export type UpdateLinkVariables = {
	body?: Schemas.UpdateLinkDTO
	pathParams: UpdateLinkPathParams
}

export const updateLink = (variables: UpdateLinkVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.Link, UpdateLinkError, Schemas.UpdateLinkDTO, {}, {}, UpdateLinkPathParams>({
		url: '/links/{linkId}',
		method: 'post',
		...variables,
		signal
	})

export type DeleteLinkPathParams = {
	linkId: number
}

export type DeleteLinkError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Unauthorized
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
	| {
			status: 404
			payload: {
				/**
				 * @example 404
				 */
				statusCode: number
				/**
				 * @example Link not found
				 */
				message: string
				/**
				 * @example Not Found
				 */
				error?: string
			}
	  }
>

export type DeleteLinkVariables = {
	pathParams: DeleteLinkPathParams
}

export const deleteLink = (variables: DeleteLinkVariables, signal?: AbortSignal) =>
	apiFetch<boolean, DeleteLinkError, undefined, {}, {}, DeleteLinkPathParams>({
		url: '/links/{linkId}',
		method: 'delete',
		...variables,
		signal
	})

export type FindLinkByIdPathParams = {
	linkId: number
}

export type FindLinkByIdError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Unauthorized
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
	| {
			status: 404
			payload: {
				/**
				 * @example 404
				 */
				statusCode: number
				/**
				 * @example Link not found
				 */
				message: string
				/**
				 * @example Not Found
				 */
				error?: string
			}
	  }
>

export type FindLinkByIdVariables = {
	pathParams: FindLinkByIdPathParams
}

export const findLinkById = (variables: FindLinkByIdVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.Link, FindLinkByIdError, undefined, {}, {}, FindLinkByIdPathParams>({
		url: '/links/{linkId}',
		method: 'get',
		...variables,
		signal
	})

export type LinkStatisticPathParams = {
	linkId: number
}

export type LinkStatisticError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: {
				/**
				 * @example 400
				 */
				statusCode: number
				/**
				 * @example Bad Request
				 */
				message: string
				/**
				 * @example Bad Request
				 */
				error?: string
			}
	  }
	| {
			status: 401
			payload: {
				/**
				 * @example 401
				 */
				statusCode: number
				/**
				 * @example Unauthorized
				 */
				message: string
				/**
				 * @example Unauthorized
				 */
				error?: string
			}
	  }
	| {
			status: 404
			payload: {
				/**
				 * @example 404
				 */
				statusCode: number
				/**
				 * @example Link not found
				 */
				message: string
				/**
				 * @example Not Found
				 */
				error?: string
			}
	  }
>

export type LinkStatisticVariables = {
	pathParams: LinkStatisticPathParams
}

export const linkStatistic = (variables: LinkStatisticVariables, signal?: AbortSignal) =>
	apiFetch<Schemas.LinkStatisticDTO, LinkStatisticError, undefined, {}, {}, LinkStatisticPathParams>({
		url: '/links/{linkId}/statistic',
		method: 'get',
		...variables,
		signal
	})

export type ClickPathParams = {
	backHalf: string
}

export type ClickError = Fetcher.ErrorWrapper<{
	status: 404
	payload: {
		/**
		 * @example 404
		 */
		statusCode: number
		/**
		 * @example Link not found
		 */
		message: string
		/**
		 * @example Not Found
		 */
		error?: string
	}
}>

export type ClickVariables = {
	pathParams: ClickPathParams
}

export const click = (variables: ClickVariables, signal?: AbortSignal) =>
	apiFetch<undefined, ClickError, undefined, {}, {}, ClickPathParams>({
		url: '/{backHalf}',
		method: 'get',
		...variables,
		signal
	})

export type DemoError = Fetcher.ErrorWrapper<undefined>

/**
 * Creates a demo account with demo data
 */
export const demo = (signal?: AbortSignal) =>
	apiFetch<undefined, DemoError, undefined, {}, {}, {}>({ url: '/demo', method: 'post', signal })

export const operationsByTag = {
	auth: { register, login, logout, profile, deleteAccount, checkUsername },
	links: { createLink, findAllLinks, updateLink, deleteLink, findLinkById, linkStatistic },
	click: { click },
	demo: { demo }
}
